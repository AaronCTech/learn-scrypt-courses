
library Util {

    static function getElemAt(bytes board, int index) : bytes {
        return board[index : index + 1];
    } 

    static function setElemAt(bytes board, int index, bytes value) : bytes {
        return board[ : index] + value + board[index + 1 : ];
    }
}


contract TicTacToe {
    PubKey alice;
    PubKey bob;
    
    static const int TURNLEN = 1;
    static const int BOARDLEN = 9;
    static const bytes EMPTY = b'00';
    static const bytes ALICE = b'01';
    static const bytes BOB = b'02';

    
    public function move(int n, Sig sig, int amount, SigHashPreimage txPreimage) {

        require(n >= 0 && n < BOARDLEN);
    }


    function won(bytes board, bytes play) : bool {

        int[8][3] lines = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
        ];

        bool anyLine = false;
        loop (8) : i {
            bool line = true;
            loop (3) : j {
                line = line && Util.getElemAt(board, lines[i][j]) == play;
            }
            
            anyLine = anyLine || line;
        }

        return anyLine;
    }


    function full(bytes board) : bool {
        bool full = true;

        loop (TicTacToe.BOARDLEN) : i {
            full = full && Util.getElemAt(board, i) != TicTacToe.EMPTY;
        }

        return full;
    }
}
